{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","todo","users","usersFromServer","map","user","className","href","TodoInfo","classNames","TodoList","todos","App","todosFromServer","useState","setTitle","setUserId","myTodos","setMyTodos","wrongUser","setWrongUser","action","method","onSubmit","event","preventDefault","arr","sort","todo1","todo2","largestId","length","state","addTodo","htmlFor","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab5f767b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { FC } from 'react';\nimport usersFromServer from '../../api/users';\n\ninterface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n\ninterface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const UserInfo: FC<Props> = ({ todo }) => {\n  const users: User[] = [...usersFromServer];\n\n  return (\n    <>\n      {users.map(user => (\n        user.id === todo.userId\n        && (\n          <a\n            className=\"UserInfo\"\n            href={`mailto:${user.email}`}\n            key={user.id}\n          >\n            {user.name}\n          </a>\n        )\n      ))}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\n\ninterface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id=\"1\"\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo todo={todo} key={todo.id} />\n\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\n\ninterface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nexport const App = () => {\n  const todos = [...todosFromServer];\n  const users = [...usersFromServer];\n\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [myTodos, setMyTodos] = useState(todos);\n  const [wrongUser, setWrongUser] = useState(false);\n\n  const addTodo = () => {\n    const arr = myTodos.sort(\n      (todo1, todo2) => todo1.id - todo2.id,\n    );\n\n    const largestId = arr[arr.length - 1].id;\n\n    setMyTodos(state => (\n      [...state, {\n        id: largestId + 1,\n        title,\n        completed: false,\n        userId,\n      }]\n    ));\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (title !== '' && userId === 0) {\n      setWrongUser(true);\n      setTitle(title);\n    } else if (title !== 'null' && userId !== 0) {\n      addTodo();\n      setTitle('');\n      setUserId(0);\n    } else if (title === '' || userId === 0) {\n      setTitle('null');\n      setWrongUser(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title === 'null' ? '' : title}\n            onChange={event => setTitle(event.target.value)}\n          />\n          {title === 'null'\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"select\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"select\"\n            value={userId}\n            onChange={event => {\n              setUserId(Number(event.target.value));\n              setWrongUser(false);\n            }}\n          >\n            <option\n              value=\"0\"\n              disabled\n            >\n              Choose a user\n            </option>\n            {users.map(user => {\n              return (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              );\n            })}\n\n          </select>\n          {wrongUser\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={myTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}